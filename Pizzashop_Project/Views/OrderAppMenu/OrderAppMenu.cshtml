@using DAL.ViewModels;
@model OrderAppMenuViewModel
@{
    Layout = "~/Views/Shared/_OrderAppLayout.cshtml";
    @* var custId = ; *@
}
<div class="d-flex m-0" id="maindivsidebar">
    <div class="overlay-category" onclick="toggleSidebarCategory()"></div>
    <div class="bg-white category-toggle-active category-toggle" style="min-height: 887px; width:250px !important;">
        <div class="fs-3 fw-bold   ">
            <div class="ms-3">Category</div>
        </div>
        <div class="text-secondary fw-bold">
            <div class="category orderAppActive favorite-item-class p-1 mt-2" onclick="categySelected(this,-1)">
                <div class="ms-3">Favorite Items </div>
            </div>
            <div class=" category p-1 mt-2" onclick="categySelected(this,0)">
                <div class="ms-3">All</div>
            </div>
            @foreach (var cat in Model.categoryList)
            {
                <div class="category p-1 mt-2" onclick="categySelected(this,@cat.CategoryId)">
                    <div class="ms-3">@cat.CategoryName</div>
                </div>
            }
        </div>


    </div>

    <!-- rightside-->
    @* <div class="col" >
        <div class="btn d-md-none" onclick="toggleSidebarCategory()"><i class="fa-solid fa-bars-staggered"></i></div>
        <div class="d-flex justify-content-center row col-12">
            <div class="col-sm-6 col-12">
                <input type="text" class="m-2 ms-3 p-2 w-75" placeholder="Search">
            </div>
            <div class="col-sm-6 col-12 d-sm-flex ms-sm-0 ms-4 gap-3 justify-content-end align-items-center">
                <div class="row  mb-2 mb-sm-0">
                    &nbsp;
                    <div class="d-flex col-auto w-auto align-items-center justify-content-center gap-1 ">
                        <div class="rounded-circle bg-success" style="width: 10px; height: 10px;">
                        </div>
                        Vegeterian
                    </div>
                    <div class="d-flex col-auto w-auto align-items-center justify-content-center gap-1 ">
                        <div class="rounded-circle bg-danger" style="width: 10px; height: 10px;">
                        </div>
                        Non-Vegeterian
                    </div>
 
                    <div class="d-flex col-auto align-items-center justify-content-center gap-1">
                        <div class="rounded-circle"
                            style="width: 10px; height: 10px; background-color: rgb(228, 148, 0);">
                        </div>
                        Vegan
                    </div>
                </div>
            </div>
        </div>
 
        <div class="col-12 row ms-1 d-flex justify-content-center justify-content-sm-start">
            <div class="col-auto d-flex mt-3">
                <div style="max-width: fit-content; ">
                    <div class="bg-white rounded d-flex justify-content-center align-items-center"
                        style="height: 60px; width: 60px; border-top-left-radius: 0.7rem !important; border-bottom-left-radius: 0.7rem !important;">
                        <img class="rounded-circle" src="~/images/dominos_background.jpg" height="50px" width="50px"
                            alt=""></div>
                </div>
                <div style="height: 60px; width: 200px; border-top-right-radius: 0.7rem !important; border-bottom-right-radius: 0.7rem !important;"
                    class="bg-danger d-flex justify-content-between">
                    <div class="ms-2 py-1 d-flex flex-column justify-content-between">
                        <span>Pizza</span>
                        <span>â‚¹120</span>
                    </div>
                    <div class="d-flex flex-column justify-content-between">
                        <span
                            style="clip-path: polygon(0% 0%, 100% 100%, 100% 0%); height: 30px; width: 30px; border-top-right-radius: 0.7rem; "
                            class="bg-primary"></span>
                        <span><i class="fa-regular fa-heart"></i></span>
                    </div>
                </div>
            </div>
        </div>
    </div> *@

    <div class="p-3 w-100 ">
        <div class="btn d-md-none" onclick="toggleSidebarCategory()"><i class="fa-solid fa-bars-staggered"></i></div>

        <div class="col  d-flex flex-xl-row flex-column p-2">

            <div class=" col-12 p-2 @((long)ViewData["customerId"] != 0  ? "col-xl-7":"col-12")">
                <div class="d-md-flex col-12 flex-xxl-row flex-column  justify-content-between mb-3">
                    <!-- search btn-->
                    <div class="search-button-orders col-12 col-sm-6 ">
                        <input type="text" id="searchbtn" placeholder="Search" class="border-0 rounded  mt-1  p-2 w-100"
                            placeholder="Search" onkeyup="searchItem(this.value)">
                    </div>
                    <!-- icons-->
                    <div
                        class="d-flex  justify-content-start justify-content-xxl-end align-items-center   gap-3 mt-lg-0 mt-3">

                        <div class="d-flex align-items-center justify-content-center col-auto gap-1 text-nowrap">
                            <div class="rounded-circle bg-success" style="width: 10px; height: 10px;">
                            </div>
                            Vegetarian
                        </div>
                        <div class="d-flex align-items-center justify-content-center col-auto gap-1 text-nowrap">
                            <div class="rounded-circle bg-danger" style="width: 10px; height: 10px;">
                            </div>
                            Non-Vegetarian
                        </div>
                        <div class="d-flex align-items-center justify-content-center col-auto gap-1 text-nowrap">
                            <div class="rounded-circle bg-warning" style="width: 10px; height: 10px;">
                            </div>
                            Vegan
                        </div>

                    </div>

                </div>
                <div class="ItemCards  d-flex flex-wrap justify-content-center justify-content-sm-start gap-3 "
                    id="ItemCards">
                    <!-- cards-->
                </div>
            </div>
            @if ((long)ViewData["customerId"] != 0)
            {
                <div class="d-none" id="customerId">@ViewData["customerId"]</div>
                <div class="col-xl-5 col-12  bg-white  p-2 mt-3" id="OrderDetailsWithTablePartial">
                    @* @await Html.PartialAsync("_MenuItemsWithOrderDetails",Model.orderdetails ) *@
                </div>
            }

        </div>
    </div>


</div>

@section scripts {
    <script>
        var categoryID;
        var AllItemsArray = []
        var ItemQuantityArr = [];
        var orderDetailIds = [];
        var orderDetailsModel;
        var itemQuantityUpdateflag = true;
        var IsOrderCompleted = false;
        var isAllItemSaved = false;
        var paymentmethodId = 1;


        function toggleSidebarCategory() {
            document.getElementsByClassName("overlay-category")[0].classList.toggle("overlay-category-active");
            document.getElementsByClassName("category-toggle")[0].classList.toggle("category-toggle-active")
            document.getElementsByClassName("category-toggle")[0].classList.toggle("category-toggle-position")
        }

        //display items by category
        function categySelected(tag, categoryId) {
            categoryID = categoryId;
            var categoryclasses = document.getElementsByClassName("category");
            for (i = 0; i < categoryclasses.length; i++) {
                categoryclasses[i].classList.remove("orderAppActive");
            }
            tag.classList.add("orderAppActive");
            console.log(categoryId);

            $.ajax({
                url: "/OrderAppMenu/GetItemByCategory",
                type: "GET",
                data: { categoryId },
                success: function (data) {

                    $("#ItemCards").html(data);
                }
            })
        }

        //search items
        function searchItem(searchText) {
            console.log(searchText);
            $.ajax({
                url: "/OrderAppMenu/GetItemByCategory",
                type: "GET",
                data: { searchText, categoryID },
                success: function (data) {
                    $("#ItemCards").html(data);
                }
            })
        }

        //favoriteItem manage
        function FavouriteItemManage(event, tag) {
            event.stopPropagation();
            var itemId = tag.getAttribute("data-itemId");
            console.log(itemId);
            var classes = tag.classList;
            console.log(classes)
            $.ajax({
                url: "/OrderAppMenu/FavouriteItemManage",
                type: "POST",
                data: { itemId, IsFavourite: classes.contains("fa-regular") ? true : false },
                success: function (res) {
                    if (res.success) {
                        successToaster(res.text);
                    } else {
                        errorToaster(res.text);
                    }
                }
            })
            if (categoryID == -1) {
                setTimeout(() => {
                    $(".favorite-item-class").click();
                }, 100)
            } else {
                classes.toggle("fa-regular");
                classes.toggle("fa-solid");
                classes.toggle("text-primary");
            }
        }

        //get orderdetails by customer id (rightside)
        function GetOrderDetailsBycustId() {
            var custId = document.getElementById("customerId").innerHTML;
            console.log("customer id", custId);
            $.ajax({
                url: "/OrderAppMenu/GetOrderDetailsBycustId",
                type: "GET",
                data: { customerId: custId },
                success: function (data) {
                    $("#OrderDetailsWithTablePartial").html(data);
                    isAllItemSaved = true;
                }
            })
            console.log("ajax")

        }

        //get customer details
        function GetCustomerDetails() {
            document.getElementById("Name").value = orderDetailsModel.customerName;
            document.getElementById("MobileNumber").value = orderDetailsModel.phoneno;
            document.getElementById("NoofPersons").value = orderDetailsModel.numberOfPerson;
            document.getElementById("Email").value = orderDetailsModel.email;
        }

        //save customer details to db
        function SaveCustomerDetails() {
            var NoofPersons = document.getElementById("NoofPersons").value;
            var name = document.getElementById("Name").value;
            var mobileNo = document.getElementById("MobileNumber").value;
            var totalCapacity = 0;
            for (i = 0; i < orderDetailsModel.tableList.length; i++) {
                totalCapacity += orderDetailsModel.tableList[i].capacity
            }
            if (NoofPersons > totalCapacity) {
                errorToaster(`Total capacity of tables is ${totalCapacity}.`);
                return;
            }
            $.ajax({
                url: "/OrderAppMenu/SaveCustomerDetails",
                type: "POST",
                data: { customerId: orderDetailsModel.customerId, name, mobileNo, NoofPersons },
                success: function (data) {
                    if (data) {
                        successToaster("Customer Details Updated.");
                        orderDetailsModel.customerName = name;
                        orderDetailsModel.phoneno = mobileNo;
                        orderDetailsModel.numberOfPerson = NoofPersons
                    } else {
                        errorToaster("Something Went Wrong. Try Again!");
                    }
                    isAllItemSaved = false;
                    $(".btn-close").click();
                }
            })
        }

        //get orderinstruction
        function getOrderInstruction() {
            document.getElementById("Comment").value = orderDetailsModel.otherInstruction == null ? "" : orderDetailsModel.otherInstruction
        }

        function saveOrderInstruction() {
            orderDetailsModel.otherInstruction = document.getElementById("Comment").value;
            successToaster("orderInstruction Saved");
            $(".btn-close").click();
            isAllItemSaved = false;
        }

        //backend order items save in array
        function FillAlreadySavedDataInArray(orderDetails) {
            orderDetailsModel = orderDetails;

            var AllItems = [];
            AllItemsArray = [];
            AllItems = orderDetails.itemsInOrderDetails;
            IsOrderCompleted = orderDetailsModel.orderStatus == "Completed" ? true : false;

            if (orderDetails.itemsInOrderDetails != null) {
                for (i = 0; i < AllItems.length; i++) {
                    var item = [];
                    for (j = 0; j < AllItems[i].modifiersInItemInvoice.length; j++) {
                        item.push(parseInt(AllItems[i].modifiersInItemInvoice[j].modifierId));
                    }
                    item.sort();
                    item.unshift(parseInt(AllItems[i].quantity));
                    item.unshift(parseInt(AllItems[i].itemId));

                    AllItemsArray.push(item);
                    @* ItemQuantityArr.push(parseInt(AllItems[i].quantity)) *@
                                                                    }
            }
            if (itemQuantityUpdateflag) {
                fillItemQuantity();
                itemQuantityUpdateflag = false;
            }
            @* if (IsOrderCompleted) {
                console.log("order completed")
                document.getElementById("SaveButtonId").setAttribute("disabled", "disabled")
                document.getElementById("CompleteButtonId").setAttribute("disabled", "disabled")
                document.getElementById("cancelButtonId").setAttribute("disabled", "disabled");
            } *@
                    if (isAllItemSaved) {
                document.getElementById("SaveButtonId").setAttribute("disabled", "disabled");
                document.getElementById("CompleteButtonId").removeAttribute("disabled");
                document.getElementById("generateInvoiceButton").removeAttribute("disabled")
            } else {
                document.getElementById("SaveButtonId").removeAttribute("disabled");
                document.getElementById("CompleteButtonId").setAttribute("disabled", "disabled")
                document.getElementById("generateInvoiceButton").setAttribute("disabled", "disabled");
            }
        }

        //fuction to fill itemQuantityarr when page loads
        function fillItemQuantity() {
            ItemQuantityArr = [];
            orderDetailIds = [];
            console.log("quantity", orderDetailsModel)
            if (orderDetailsModel.itemsInOrderDetails != null) {
                for (i = 0; i < orderDetailsModel.itemsInOrderDetails.length; i++) {
                    ItemQuantityArr.push(parseInt(orderDetailsModel.itemsInOrderDetails[i].quantity))
                    orderDetailIds.push(parseInt(orderDetailsModel.itemsInOrderDetails[i].orderDetailId))
                }
            }

        }

        //Add item by menu without save button click
        function AddItemModifierToList() {
            if (!IsOrderCompleted) {
                isAllItemSaved = false;
                var selectedModifiers = document.getElementsByClassName("modifierSelected");
                var itemId = document.getElementById("itemIdForOrderDetails").value;
                var item = [];

                for (i = 0; i < selectedModifiers.length; i++) {
                    item.push(parseInt(selectedModifiers[i].getAttribute("data-modifierId")));
                }
                item.sort();
                item.unshift(1);
                item.unshift(parseInt(itemId))
                var ItemCheckFlag = true
                AllItemsArray.forEach((x) => {
                    if (x.toString().substr(0, x[0].toString().length + 1) + x.toString().substr(4) == item.toString().substr(0, item[0].toString().length + 1) + item.toString().substr(4) && x[1] < 10) {
                        x[1]++
                        console.log("x", x[1])
                        ItemCheckFlag = false
                    }
                    else if (x[1] == 10) {
                        ItemCheckFlag = false
                        errorToaster("Maximum quantity already added")
                    }
                })
                if (ItemCheckFlag) AllItemsArray.push(item);
                console.log("allitemarr", AllItemsArray)
                $.ajax({
                    url: "/OrderAppMenu/UpdateOrderDetailPartialView",
                    type: "GET",
                    data: { ItemList: JSON.stringify(AllItemsArray), orderDetails: JSON.stringify(orderDetailsModel) },
                    success: function (data) {
                        $("#OrderDetailsWithTablePartial").html(data);
                    }
                })
                $(".btn-close").click();
            } else {
                errorToaster("Order is already completed")
            }
        }

        function Minus(tag, count) {
            if (!IsOrderCompleted) {
                if (parseInt(tag.nextElementSibling.innerHTML) < 0) {
                    tag.nextElementSibling.innerHTML = 0;
                }
                if (parseInt(tag.nextElementSibling.innerHTML) <= ItemQuantityArr[count]) {
                    errorToaster("You can not change Order Because it is almost ready");
                    return;
                }
                isAllItemSaved = false;
                AllItemsArray[count][1] = parseInt(tag.nextElementSibling.innerHTML) - 1;
                console.log("allitemarr", AllItemsArray)
                $.ajax({
                    url: "/OrderAppMenu/UpdateOrderDetailPartialView",
                    type: "GET",
                    data: { ItemList: JSON.stringify(AllItemsArray), orderDetails: JSON.stringify(orderDetailsModel) },
                    success: function (data) {
                        $("#OrderDetailsWithTablePartial").html(data);
                    }
                })
            } else {
                errorToaster("Order is already completed")
            }
        }

        function Plus(tag, count) {
            if (!IsOrderCompleted) {
                isAllItemSaved = false;
                if (parseInt(tag.previousElementSibling.innerHTML) >= 10) {
                    errorToaster("Can not aorder more than 10 items");
                    return;
                }
                AllItemsArray[count][1] = parseInt(tag.previousElementSibling.innerHTML) + 1;
                console.log("allitemarr", AllItemsArray)
                $.ajax({
                    url: "/OrderAppMenu/UpdateOrderDetailPartialView",
                    type: "GET",
                    data: { ItemList: JSON.stringify(AllItemsArray), orderDetails: JSON.stringify(orderDetailsModel) },
                    success: function (data) {
                        $("#OrderDetailsWithTablePartial").html(data);
                    }
                })
            } else {
                errorToaster("Order is already completed")
            }
        }

        //show item instruction modal
        function ItemWiseInstruction(tag, count) {
            console.log(orderDetailsModel.itemsInOrderDetails[count].specialInstruction)
            document.getElementById("ItemInstruction").value = orderDetailsModel.itemsInOrderDetails[count].specialInstruction != null ? orderDetailsModel.itemsInOrderDetails[count].specialInstruction : "";
            document.getElementById("itemInstructionCount").value = count;
        }

        //store item instruction inmViewmodel
        function StoreItemInstruction() {
            if (!IsOrderCompleted) {
                isAllItemSaved = false;
                var count = document.getElementById("itemInstructionCount").value;
                orderDetailsModel.itemsInOrderDetails[count].specialInstruction = document.getElementById("ItemInstruction").value;
                $(".btn-close").click();
            } else {
                errorToaster("Order is already completed")
            }
        }

        //remove item if not saved
        function RemoveItemFromOrder(itemId, count) {
            if (!IsOrderCompleted) {
                isAllItemSaved = false;
                AllItemsArray.splice(count, 1);
                console.log(AllItemsArray)
                $.ajax({
                    url: "/OrderAppMenu/RemoveItemfromOrderDetailPartialView",
                    type: "GET",
                    data: { ItemList: JSON.stringify(AllItemsArray), count, orderDetails: JSON.stringify(orderDetailsModel) },
                    success: function (data) {
                        $("#OrderDetailsWithTablePartial").html(data);
                    }
                })
            } else {
                errorToaster("Order is already completed")
            }
        }

        //save order details in db
        function SaveorderDetails() {
            if (!IsOrderCompleted) {
                $.ajax({
                    url: "/OrderAppMenu/SaveOrderDetails",
                    type: "POST",
                    data: { orderDetailIds: JSON.stringify(orderDetailIds), orderDetails: JSON.stringify(orderDetailsModel) },
                    success: function (data) {
                        $("#OrderDetailsWithTablePartial").html(data);
                        itemQuantityUpdateflag = true;
                        isAllItemSaved = true;
                        successToaster("Order Saved.")
                    }
                })
            } else {
                errorToaster("Order is already completed")
            }

        }

        //complete ordervalidationsCheck
        function CompleteOrderValidation() {
            if (orderDetailsModel.itemsInOrderDetails == null) {
                errorToaster("Please Order Something First");
                return;
            }
            for (i = 0; i < orderDetailsModel.itemsInOrderDetails.count; i++) {
                if (orderDetailsModel.itemsInOrderDetails[i].status == "Pending") {
                    errorToaster("Please Save Orders First");
                    return;
                }
            } if (!isAllItemSaved) {
                errorToaster("Please Save Orders First")
                return;
            }
            $.ajax({
                url: "/OrderAppMenu/CompleteOrderValidation",
                type: "POST",
                data: { orderDetailIds: JSON.stringify(orderDetailIds), orderDetails: JSON.stringify(orderDetailsModel) },
                success: function (data) {
                    if (data.success) {
                        $("#CustomerReviewModal").modal("show");
                    } else {
                        errorToaster("All items are not ready");
                    }
                }
            })
        }

        //complete order details 
        function CompleteOrder() {
            var foodreview = document.getElementsByClassName("food-review-active").length;
            var serviceReview = document.getElementsByClassName("service-review-active").length;
            var ambienceReview = document.getElementsByClassName("ambience-review-active").length;
            var reviewtext = document.getElementById("ReviewText").value;
            console.log(foodreview)

            var paymentmethod = document.getElementsByClassName("paymentmethod");
            console.log(paymentmethod)
            for (i = 0; i < paymentmethod.length; i++) {
                if (paymentmethod[i].checked) {
                    paymentmethodId = paymentmethod[i].value;
                }
            }
            $.ajax({
                url: "/OrderAppMenu/SaveRatings",
                type: "POST",
                data: { customerId: orderDetailsModel.customerId, foodreview, serviceReview, ambienceReview, reviewtext, },
                success: function (data) {
                    orderDetailsModel.RatingId = data;
                    $.ajax({
                        url: "/OrderAppMenu/CompleteOrder",
                        type: "POST",
                        data: { orderDetails: JSON.stringify(orderDetailsModel), paymentmethodId },
                        success: function (data) {
                            $("#OrderDetailsWithTablePartial").html(data);
                            itemQuantityUpdateflag = true;
                            $(".btn-close").click();
                            IsOrderCompleted = true;
                            successToaster("Order Completed.")
                            window.location.href = "/OrderAppTable/OrderAppTable"
                        }
                    })
                    $(".btn-close").click();
                }
            })

        }

        //generate invoice
        @* function GeneratePdfInvoice() {
            console.log("generateinvoice")
            $.ajax({
                url: "/OrderAppMenu/GeneratePdfInvoice",
                type: "GET",
                data: { customerId: orderDetailsModel.customerId },
                success: function () {
                    console.log("invoice generated");
                }
            })
        } *@

            function GeneratePdfInvoice() {
                $.ajax({
                    url: `/OrderAppMenu/GeneratePdfInvoice`,
                    type: "GET",
                    data: { customerId: orderDetailsModel.customerId },
                    xhrFields: {
                        responseType: 'blob' //binary large object -- to handle binary response
                    },
                    success: function (data, status, xhr) {
                        let filename = "OrderInvoice.pdf";

                        let disposition = xhr.getResponseHeader('Content-Disposition');
                        @* console.log("disp", disposition); *@
                                if (disposition && disposition.indexOf('attachment') !== -1) {
                            let matches = /filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/.exec(disposition); //ExportOrderDataToExcel filename From disposition
                            if (matches && matches[1]) {
                                filename = matches[1].replace(/['"]/g, ''); // Remove quotes if present
                            }
                        }

                        let blob = new Blob([data], { type: xhr.getResponseHeader('Content-Type') });
                        let link = document.createElement('a');
                        link.href = window.URL.createObjectURL(blob); //timePeriod url points to blob obj
                        link.download = filename; //Download file name
                        document.body.appendChild(link); //appendChild so that it Cancelled be cliked
                        link.click();
                        document.body.removeChild(link);

                        console.log("Export Successfully");
                    }
                });
            }

        //cancel order
        function cancelOrder() {
            $.ajax({
                url: "/OrderAppMenu/cancelOrder",
                type: "POST",
                data: { orderDetailvm: orderDetailsModel },
                success: function (data) {
                    if (!data.success) {
                        itemQuantityUpdateflag = true;
                        $("#OrderDetailsWithTablePartial").html(data);
                        errorToaster("The order item is ready, cannot cancel the order")
                    } else {
                        successToaster("Order Cancelled.")
                        window.location.href = "/OrderAppTable/OrderAppTable"
                    }
                }
            })
        }


        function ChangeReview(type, number) {
            if (!IsOrderCompleted) {
                var StarTags = document.getElementsByClassName(`${type}-review-class`)
                var CheckStarFlag = true
                for (i = 1; i < StarTags.length; i++) {
                    if (StarTags[i].classList.contains(`${type}-review-active`)) {
                        CheckStarFlag = false
                        StarTags[i].classList.add("fa-regular")
                        StarTags[i].classList.remove("fa-solid")
                        StarTags[i].classList.remove(`${type}-review-active`)
                    }
                }
                if (number == 1) {
                    var FirstStarTag = document.getElementById(`${type}-review-1`)
                    if (FirstStarTag.classList.contains(`${type}-review-active`) && CheckStarFlag) {
                        FirstStarTag.classList.add("fa-regular")
                        FirstStarTag.classList.remove("fa-solid")
                        FirstStarTag.classList.remove(`${type}-review-active`)
                    }
                    else {
                        FirstStarTag.classList.remove("fa-regular")
                        FirstStarTag.classList.add("fa-solid")
                        FirstStarTag.classList.add(`${type}-review-active`)
                    }
                }
                else {
                    for (i = 1; i <= number; i++) {
                        var StartTag = document.getElementById(`${type}-review-${i}`)
                        StartTag.classList.remove("fa-regular")
                        StartTag.classList.add("fa-solid")
                        StartTag.classList.add(`${type}-review-active`)
                    }
                }
            }
            else {
                errorToaster("Order is already completed")
            }
        }



        $(document).ready(function (x) {
            var maindivsidebar = document.getElementById("maindivsidebar")

            maindivsidebar.parentElement.classList.remove("pb-3")
            maindivsidebar.parentElement.classList.remove("ps-lg-5")
            maindivsidebar.parentElement.classList.remove("pt-3")
            maindivsidebar.parentElement.classList.remove("ps-md-4")
            maindivsidebar.parentElement.classList.remove("pe-md-4")
            maindivsidebar.parentElement.classList.remove("pe-lg-5")
            maindivsidebar.parentElement.classList.add("p-0")

            categySelected(document.getElementsByClassName("category")[0], -1);
            GetOrderDetailsBycustId();
            @* itemQuantityUpdateflag=true; *@

                @* if (@((long)ViewData["customerId"] != 0)){
                var orderDetails = @Html.Raw(Json.Serialize(Model));
                console.log(orderDetails);
                FillAlreadySavedDataInArray(orderDetails);
            } *@

                                                                                })
    </script>
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <partial name="_Toaster" />
}