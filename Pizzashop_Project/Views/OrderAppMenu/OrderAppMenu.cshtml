@using DAL.ViewModels;
@model OrderAppMenuViewModel
@{
    Layout = "~/Views/Shared/_OrderAppLayout.cshtml";
    @* var custId = ; *@
}
<div class="d-flex m-0" id="maindivsidebar">
    <div class="overlay-category" onclick="toggleSidebarCategory()"></div>
    <div class="bg-white category-toggle-active category-toggle" style="min-height: 887px; width:250px !important;">
        <div class="fs-3 fw-bold   ">
            <div class="ms-3">Category</div>
        </div>
        <div class="text-secondary fw-bold">
            <div class="category orderAppActive favorite-item-class p-1 mt-2" onclick="categySelected(this,-1)">
                <div class="ms-3">Favorite Items </div>
            </div>
            <div class=" category p-1 mt-2" onclick="categySelected(this,0)">
                <div class="ms-3">All</div>
            </div>
            @foreach (var cat in Model.categoryList)
            {
                <div class="category p-1 mt-2" onclick="categySelected(this,@cat.CategoryId)">
                    <div class="ms-3">@cat.CategoryName</div>
                </div>
            }
        </div>


    </div>

    <!-- rightside-->
    @* <div class="col" >
        <div class="btn d-md-none" onclick="toggleSidebarCategory()"><i class="fa-solid fa-bars-staggered"></i></div>
        <div class="d-flex justify-content-center row col-12">
            <div class="col-sm-6 col-12">
                <input type="text" class="m-2 ms-3 p-2 w-75" placeholder="Search">
            </div>
            <div class="col-sm-6 col-12 d-sm-flex ms-sm-0 ms-4 gap-3 justify-content-end align-items-center">
                <div class="row  mb-2 mb-sm-0">
                    &nbsp;
                    <div class="d-flex col-auto w-auto align-items-center justify-content-center gap-1 ">
                        <div class="rounded-circle bg-success" style="width: 10px; height: 10px;">
                        </div>
                        Vegeterian
                    </div>
                    <div class="d-flex col-auto w-auto align-items-center justify-content-center gap-1 ">
                        <div class="rounded-circle bg-danger" style="width: 10px; height: 10px;">
                        </div>
                        Non-Vegeterian
                    </div>
 
                    <div class="d-flex col-auto align-items-center justify-content-center gap-1">
                        <div class="rounded-circle"
                            style="width: 10px; height: 10px; background-color: rgb(228, 148, 0);">
                        </div>
                        Vegan
                    </div>
                </div>
            </div>
        </div>
 
        <div class="col-12 row ms-1 d-flex justify-content-center justify-content-sm-start">
            <div class="col-auto d-flex mt-3">
                <div style="max-width: fit-content; ">
                    <div class="bg-white rounded d-flex justify-content-center align-items-center"
                        style="height: 60px; width: 60px; border-top-left-radius: 0.7rem !important; border-bottom-left-radius: 0.7rem !important;">
                        <img class="rounded-circle" src="~/images/dominos_background.jpg" height="50px" width="50px"
                            alt=""></div>
                </div>
                <div style="height: 60px; width: 200px; border-top-right-radius: 0.7rem !important; border-bottom-right-radius: 0.7rem !important;"
                    class="bg-danger d-flex justify-content-between">
                    <div class="ms-2 py-1 d-flex flex-column justify-content-between">
                        <span>Pizza</span>
                        <span>â‚¹120</span>
                    </div>
                    <div class="d-flex flex-column justify-content-between">
                        <span
                            style="clip-path: polygon(0% 0%, 100% 100%, 100% 0%); height: 30px; width: 30px; border-top-right-radius: 0.7rem; "
                            class="bg-primary"></span>
                        <span><i class="fa-regular fa-heart"></i></span>
                    </div>
                </div>
            </div>
        </div>
    </div> *@

    <div class="p-3 w-100 ">
        <div class="btn d-md-none" onclick="toggleSidebarCategory()"><i class="fa-solid fa-bars-staggered"></i></div>

        <div class="col  d-flex flex-xl-row flex-column p-2">

            <div class=" col-12 p-2 @((long)ViewData["customerId"] != 0  ? "col-xl-7":"col-12")">
                <div class="d-md-flex col-12 flex-xxl-row flex-column  justify-content-between mb-3">
                    <!-- search btn-->
                    <div class="search-button-orders col-12 col-sm-6 ">
                        <input type="text" id="searchbtn" placeholder="Search" class="border-0 rounded  mt-1  p-2 w-100"
                            placeholder="Search" onkeyup="searchItem(this.value)">
                    </div>
                    <!-- icons-->
                    <div
                        class="d-flex  justify-content-start justify-content-xxl-end align-items-center   gap-3 mt-lg-0 mt-3">

                        <div class="d-flex align-items-center justify-content-center col-auto gap-1 text-nowrap">
                            <div class="rounded-circle bg-success" style="width: 10px; height: 10px;">
                            </div>
                            Vegetarian
                        </div>
                        <div class="d-flex align-items-center justify-content-center col-auto gap-1 text-nowrap">
                            <div class="rounded-circle bg-danger" style="width: 10px; height: 10px;">
                            </div>
                            Non-Vegetarian
                        </div>
                        <div class="d-flex align-items-center justify-content-center col-auto gap-1 text-nowrap">
                            <div class="rounded-circle bg-warning" style="width: 10px; height: 10px;">
                            </div>
                            Vegan
                        </div>

                    </div>

                </div>
                <div class="ItemCards  d-flex flex-wrap justify-content-center justify-content-sm-start gap-3 "
                    id="ItemCards">
                    <!-- cards-->
                </div>
            </div>
            @if ((long)ViewData["customerId"] != 0)
            {
                <div class="d-none" id="customerId">@ViewData["customerId"]</div>
                <div class="col-xl-5 col-12  bg-white  p-2 mt-3" id="OrderDetailsWithTablePartial">
                    @* @await Html.PartialAsync("_MenuItemsWithOrderDetails",Model.orderdetails ) *@
                </div>
            }

        </div>
    </div>


</div>

@section scripts {
    <script>
        var categoryID;
        var AllItemsArray = []
        var ItemQuantityArr = [];
        var orderDetailIds = [];
        var orderDetailsModel;
        var itemQuantityUpdateflag = true;


        function toggleSidebarCategory() {
            document.getElementsByClassName("overlay-category")[0].classList.toggle("overlay-category-active");
            document.getElementsByClassName("category-toggle")[0].classList.toggle("category-toggle-active")
            document.getElementsByClassName("category-toggle")[0].classList.toggle("category-toggle-position")
        }

        //display items by category
        function categySelected(tag, categoryId) {
            categoryID = categoryId;
            var categoryclasses = document.getElementsByClassName("category");
            for (i = 0; i < categoryclasses.length; i++) {
                categoryclasses[i].classList.remove("orderAppActive");
            }
            tag.classList.add("orderAppActive");
            console.log(categoryId);

            $.ajax({
                url: "/OrderAppMenu/GetItemByCategory",
                type: "GET",
                data: { categoryId },
                success: function (data) {

                    $("#ItemCards").html(data);
                }
            })
        }

        //search items
        function searchItem(searchText) {
            console.log(searchText);
            $.ajax({
                url: "/OrderAppMenu/GetItemByCategory",
                type: "GET",
                data: { searchText, categoryID },
                success: function (data) {
                    $("#ItemCards").html(data);
                }
            })
        }

        //favoriteItem manage
        function FavouriteItemManage(event, tag) {
            event.stopPropagation();
            var itemId = tag.getAttribute("data-itemId");
            console.log(itemId);
            var classes = tag.classList;
            console.log(classes)
            $.ajax({
                url: "/OrderAppMenu/FavouriteItemManage",
                type: "POST",
                data: { itemId, IsFavourite: classes.contains("fa-regular") ? true : false },
                success: function (res) {
                    if (res.success) {
                        successToaster(res.text);
                    } else {
                        errorToaster(res.text);
                    }
                }
            })
            if (categoryID == -1) {
                setTimeout(() => {
                    $(".favorite-item-class").click();
                }, 100)
            } else {
                classes.toggle("fa-regular");
                classes.toggle("fa-solid");
                classes.toggle("text-primary");
            }
        }

        //get orderdetails by customer id (rightside)
        function GetOrderDetailsBycustId() {
            var custId = document.getElementById("customerId").innerHTML;
            console.log(custId);
            $.ajax({
                url: "/OrderAppMenu/GetOrderDetailsBycustId",
                type: "GET",
                data: { customerId: custId },
                success: function (data) {
                    $("#OrderDetailsWithTablePartial").html(data);
                }
            })
        }

        //backend order items save in array
        function FillAlreadySavedDataInArray(orderDetails) {
            orderDetailsModel = orderDetails;

            var AllItems = [];
            AllItemsArray = [];
            AllItems = orderDetails.itemsInOrderDetails;

            if (orderDetails.itemsInOrderDetails != null) {
                for (i = 0; i < AllItems.length; i++) {
                    var item = [];
                    for (j = 0; j < AllItems[i].modifiersInItemInvoice.length; j++) {
                        item.push(parseInt(AllItems[i].modifiersInItemInvoice[j].modifierId));
                    }
                    item.sort();
                    item.unshift(parseInt(AllItems[i].quantity));
                    item.unshift(parseInt(AllItems[i].itemId));

                    AllItemsArray.push(item);
                    @* ItemQuantityArr.push(parseInt(AllItems[i].quantity)) *@
                    }
            }
            if (itemQuantityUpdateflag) {
                fillItemQuantity();
                itemQuantityUpdateflag = false;
            }
        }

        //fuction to fill itemQuantityarr when page loads
        function fillItemQuantity() {
            ItemQuantityArr = [];
            console.log("quantity", orderDetailsModel)
            if (orderDetailsModel.itemsInOrderDetails != null) {
                for (i = 0; i < orderDetailsModel.itemsInOrderDetails.length; i++) {
                    ItemQuantityArr.push(parseInt(orderDetailsModel.itemsInOrderDetails[i].quantity))
                    orderDetailIds.push(parseInt(orderDetailsModel.itemsInOrderDetails[i].orderDetailId))
                }
            }

        }

        //Add item by menu without save button click
        function AddItemModifierToList() {
            var selectedModifiers = document.getElementsByClassName("modifierSelected");
            var itemId = document.getElementById("itemIdForOrderDetails").value;
            var item = [];

            for (i = 0; i < selectedModifiers.length; i++) {
                item.push(parseInt(selectedModifiers[i].getAttribute("data-modifierId")));
            }
            item.sort();
            item.unshift(1);
            item.unshift(parseInt(itemId))
            @* console.log(item) *@
                        var ItemCheckFlag = true
            AllItemsArray.forEach((x) => {
                if (x.toString().substr(0, x[0].toString().length + 1) + x.toString().substr(4) == item.toString().substr(0, item[0].toString().length + 1) + item.toString().substr(4) && x[1] < 10) {
                    x[1]++
                    console.log("x", x[1])
                    ItemCheckFlag = false
                }
                else if (x[1] == 10) {
                    ItemCheckFlag = false
                    errorToaster("Maximum quantity already added")
                }
            })
            if (ItemCheckFlag) AllItemsArray.push(item);
            console.log("allitemarr", AllItemsArray)
            $.ajax({
                url: "/OrderAppMenu/UpdateOrderDetailPartialView",
                type: "GET",
                data: { ItemList: JSON.stringify(AllItemsArray), orderDetails: JSON.stringify(orderDetailsModel) },
                success: function (data) {
                    $("#OrderDetailsWithTablePartial").html(data);
                }
            })
            $(".btn-close").click();
        }

        function Minus(tag, count) {
            if (parseInt(tag.nextElementSibling.innerHTML) < 0) {
                tag.nextElementSibling.innerHTML = 0;
            }
            if(parseInt(tag.nextElementSibling.innerHTML) <= ItemQuantityArr[count]){
                errorToaster("You can not change Order Because it is almost ready");
                return;
            }
            AllItemsArray[count][1] = parseInt(tag.nextElementSibling.innerHTML) - 1;
            console.log("allitemarr", AllItemsArray)
            $.ajax({
                url: "/OrderAppMenu/UpdateOrderDetailPartialView",
                type: "GET",
                data: { ItemList: JSON.stringify(AllItemsArray), orderDetails: JSON.stringify(orderDetailsModel) },
                success: function (data) {
                    $("#OrderDetailsWithTablePartial").html(data);
                }
            })
        }

        function Plus(tag, count) {
            if (parseInt(tag.previousElementSibling.innerHTML) >= 10) {
                errorToaster("Can not aorder more than 10 items");
                return;
            }
            AllItemsArray[count][1] = parseInt(tag.previousElementSibling.innerHTML) + 1;
            console.log("allitemarr", AllItemsArray)
            $.ajax({
                url: "/OrderAppMenu/UpdateOrderDetailPartialView",
                type: "GET",
                data: { ItemList: JSON.stringify(AllItemsArray), orderDetails: JSON.stringify(orderDetailsModel) },
                success: function (data) {
                    $("#OrderDetailsWithTablePartial").html(data);
                }
            })
            @* tag.previousElementSibling.innerHTML = parseInt(tag.previousElementSibling.innerHTML) + 1; *@
                    }

        //show item instruction modal
        function ItemWiseInstruction(tag, count) {
            console.log(orderDetailsModel.itemsInOrderDetails[count].specialInstruction)
            document.getElementById("ItemInstruction").value = orderDetailsModel.itemsInOrderDetails[count].specialInstruction != null ? orderDetailsModel.itemsInOrderDetails[count].specialInstruction : "";
            document.getElementById("itemInstructionCount").value = count;
        }

        //store item instruction inmViewmodel
        function StoreItemInstruction() {
            var count = document.getElementById("itemInstructionCount").value;
            orderDetailsModel.itemsInOrderDetails[count].specialInstruction = document.getElementById("ItemInstruction").value;
            $(".btn-close").click();
        }

        //remove item if not saved
        function RemoveItemFromOrder(itemId, count) {
            AllItemsArray.splice(count, 1);
            console.log(AllItemsArray)
            $.ajax({
                url: "/OrderAppMenu/RemoveItemfromOrderDetailPartialView",
                type: "GET",
                data: { ItemList: JSON.stringify(AllItemsArray), count, orderDetails: JSON.stringify(orderDetailsModel) },
                success: function (data) {
                    $("#OrderDetailsWithTablePartial").html(data);
                }
            })
        }

        //save order details in db
        function SaveorderDetails() {
            $.ajax({
                url: "/OrderAppMenu/SaveOrderDetails",
                type: "POST",
                data: { orderDetailIds:JSON.stringify(orderDetailIds) , orderDetails: JSON.stringify(orderDetailsModel) },
                success: function (data) {
                    $("#OrderDetailsWithTablePartial").html(data);
                }
            })
        }



        $(document).ready(function (x) {
            var maindivsidebar = document.getElementById("maindivsidebar")

            maindivsidebar.parentElement.classList.remove("pb-3")
            maindivsidebar.parentElement.classList.remove("ps-lg-5")
            maindivsidebar.parentElement.classList.remove("pt-3")
            maindivsidebar.parentElement.classList.remove("ps-md-4")
            maindivsidebar.parentElement.classList.remove("pe-md-4")
            maindivsidebar.parentElement.classList.remove("pe-lg-5")
            maindivsidebar.parentElement.classList.add("p-0")

            categySelected(document.getElementsByClassName("category")[0], -1);
            GetOrderDetailsBycustId();
            @* itemQuantityUpdateflag=true; *@

                @* if (@((long)ViewData["customerId"] != 0)){
                var orderDetails = @Html.Raw(Json.Serialize(Model));
                console.log(orderDetails);
                FillAlreadySavedDataInArray(orderDetails);
            } *@

                                })
    </script>
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <partial name="_Toaster" />
}