@using DAL.ViewModels;
@model List<TableViewModelForOrderAppTable>;

@if ( Model == null)
{
    <div>No Table in this Section</div>
}
else
{
    @foreach (var table in Model)
    {
        <div class="table-card  card border border-1 rounded-2 " style="width: 270px;">
            <div class="d-none">@table.TableId</div>
            <div class="d-none">@table.SectionId</div>
            <div class="card-body rounded-1  d-flex flex-column bg-light text-secondary @(table.Status == "Assigned" || table.Status == "Occupied" ? "tableassigned" : table.Status == "Running" ? "tableRunning" : "tableAvailable")"
                @(table.Status == "Available" ? "onclick=SelectTable(this)" : "onclick=OpenMenuForOrder(this)")>
                <div class="d-flex justify-content-between align-items-center mx-1">
                    <div
                        class="fs-4 fw-bold @(table.Status == "Assigned" || table.Status == "Occupied" ? "text-success" : table.Status == "Running" ? "text-primary" : "text-secondary")">
                        @table.TableName</div>
                   
                        <div>â‚¹@table.TotalSpend</div>
                    
                </div>

                <div class="d-flex justify-content-between align-items-center mx-1">
                    <div class="d-flex flex-column align-items-center flex-column">
                        <div><i class="bi bi-people"></i></div>
                        <div>@table.Capacity</div>
                        <div>&nbsp;</div>
                    </div>
                    <div class="d-flex flex-column align-items-center ">
                        <div><i class="bi bi-stopwatch"></i></div>
                        @if (table.Status == "Available")
                        {
                            <div>0</div>
                            <div>min</div>

                        }
                        else
                        {
                            <div>
                                <span class="d-none">@table.Totaltime</span>
                                <span class="runningTimeSpanTag"></span>
                            </div>
                        }
                        @* <div>min</div> *@
                    </div>
                </div>
            </div>
        </div>
    }
}




<script>

    //functionto call menu after table assigned
    function OpenMenuForOrder(tag) {
        var customerId;
        var tableId = tag.parentElement.children[0].innerHTML;
        var sectionId = tag.children[1].innerHTML;
        console.log(tableId);
        $.ajax({
            url: "/OrderAppTable/GetCustomerIdByTableId",
            type: "GET",
            data: { tableId },
            success: function (data) {
                customerId = data.custId;
                console.log("cust", customerId);
                var menubutton = document.getElementById("MenuButtonLayout")
                console.log(menubutton);
                menubutton.setAttribute("href", `/OrderAppMenu/OrderAppMenu?customerId=${customerId}`)
                console.log(menubutton)
                menubutton.click();
            }
            
        })
    }

    function orderTimeDisplay() {
        var orderdateclass = document.getElementsByClassName("runningTimeSpanTag");
        for (i = 0; i < orderdateclass.length; i++) {
            var curdate = Date.now();
            var orderDate = orderdateclass[i].previousElementSibling.innerHTML;
            var Dateonly = orderDate.split(" ");
            var orderday = Dateonly[0].split("-")[0];
            var ordermonth = Dateonly[0].split("-")[1];
            var orderyear = Dateonly[0].split("-")[2];
            var orderDateformated = orderyear + "-" + ordermonth + "-" + orderday + "T" + Dateonly[1];
            var orderDateToCal = new Date(orderDateformated);
            var timeDiff = curdate - orderDateToCal;

            const timeDiffday = Math.floor(timeDiff / (24 * 60 * 60 * 1000));
            const daysms = timeDiff % (24 * 60 * 60 * 1000);
            const timeDiffHours = Math.floor(daysms / (60 * 60 * 1000));
            const hoursms = timeDiff % (60 * 60 * 1000);
            const timeDiffMins = Math.floor(hoursms / (60 * 1000));
            const minutesms = timeDiff % (60 * 1000);
            const timeDiffSecs = Math.floor(minutesms / 1000);
            orderdateclass[i].innerHTML = timeDiffday + " days " + timeDiffHours + " hours <br>" + timeDiffMins + " min " + timeDiffSecs + " sec"
        }
    }

    var displaytime = window.setInterval(function () {
        orderTimeDisplay()
    }, -1000);

    

</script>
@{
    await Html.RenderPartialAsync("_ValidationScriptsPartial");
}
<partial name="_Toaster" />
