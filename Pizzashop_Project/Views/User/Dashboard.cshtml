@using DAL.ViewModels
@model DAL.Models.User
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="body_content">
    <div class="d-flex justify-content-between align-items-center">
        <h3 class="custom-blue fw-bold m-2 col-auto">Dashboard</h3>
        <div class="col-3" style="padding-right: 12px;">
            <select class="m-2 mt-3 mx-0 pe-0 p-2 w-100" id="TimePeriod" style="padding-top: 11px !important;" >
                <option value="Today" selected>Today</option>
                <option value="last7">Last 7 days</option>
                <option value="last30">Last 30 days</option>
                <option value="curentMonth">Current month</option>
                <option value="custom" data-bs-toggle="modal" data-bs-target="#CustomDatedashboardModal">Custom Date</option>

            </select>
        </div>
    </div>

    <div class="container-fluid mt-3 d-flex flex-column align-items-center" id="DashboardPartialView">
        @* @await Html.PartialAsync("_DashboardStatesPartial", new DashboardViewModel()); *@
    </div>

</div>

<!---------------------------modal---------------------------->
<div id="CustomDatedashboardModal" class="modal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Customer date</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="customDatesFormId">
                <div class="modal-body row">
                    <div class="form-floating  col-6 ">
                        <input type="date" id="startDate" class="form-control m-2 me-3 p-2 w-100 pe-0">
                        <label class="ms-3 mt-1">From Date</label>

                    </div>
                    <div class="form-floating  col-6">
                        <input type="date" id="endDate" class="form-control m-2 me-3 p-2 w-100 pe-0">
                        <label class="ms-3 mt-1">To Date</label>
                    </div>

                </div>

                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary">save</button>
                    <button type="button" class="btn btn-outline-primary" data-bs-dismiss="modal">cancel</button>
                </div>
            </form>
        </div>
    </div>
</div>



@section scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        var Labels = Array.from({ length: 31 }, (_, i) => i + 1)
        var RevenueGrowthData 
        var CustomerCountData
        var timePeriod = $("#TimePeriod").val();
        var startDate;
        var endDate;

        $(document).ready(function () {
            var successMessage = '@TempData["SuccessMessage"]';
            var errorMessage = '@TempData["ErrorMessage"]';
            toastr.options = {
                "closeButton": true,
                "progressBar": true,
                "timeOut": "2000"
            };
            console.log("successMessage", successMessage);
            if (successMessage) {
                toastr.success(successMessage);
            }
            if (errorMessage) {
                toastr.error(errorMessage);
            }
            fillDashboardDetails()

            $("#TimePeriod").on("change", function () {
                timePeriod = $(this).val();
                console.log(timePeriod)
                if (timePeriod == "custom") {
                    $("#CustomDatedashboardModal").modal("toggle");
                }
                else {
                    EnptyDateFormFiels();
                    startDate = "";
                    endDate = "";
                    fillDashboardDetails(timePeriod,startDate,endDate);
                }
            });

            $("#customDatesFormId").on("submit", function (e) {
                e.preventDefault();
                startDate = $("#startDate").val();
                endDate = $("#endDate").val();
                fillDashboardDetails(timePeriod,startDate,endDate);
                $('.btn-close').click();
            });

            $("#startDate").on("change", function () {
                startDate = document.getElementById("startDate").value;
                endDateInput = document.getElementById("endDate").value;

                if (endDateInput == "") return
                if (endDateInput.value < startDate) {
                    errorToaster("To date should be greater than from date.Reset to date");
                    document.getElementById("endDate").value = "";
                }
            })

            $("#endDate").on("change", function () {
                startDate = document.getElementById("startDate").value;
                endDate = document.getElementById("endDate").value;

                if (endDate < startDate) {
                    errorToaster("To date should be greater than from date.Reset to date");
                    document.getElementById("endDate").value = "";
                }
            })
        });

        function EnptyDateFormFiels() {
            $("#startDate").val("");
            $("#endDate").val("");
        }

        //show graph
        function ShowGraphs() {
            var ctx = document.getElementById("ChartId").getContext("2d");

            // Revenue chart
            RevenueChart = new Chart(ctx, {
                type: "line", // Line chart type
                data: {
                    labels: Labels, // Generate numbers from 1 to 31
                    datasets: [{
                        label: "Revenue (â‚¹)",
                        data: RevenueGrowthData, // Random data for each day
                        backgroundColor: "rgba(75, 192, 192, 0.2)", // Light fill color
                        borderColor: "rgba(75, 192, 192, 1)", // Line color
                        borderWidth: 2,
                        fill: true, // Fill area under line
                        tension: 0.3 // Smooth curve effect
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        x: {
                            title: {
                                display: true,
                            }
                        },
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                            }
                        }
                    }
                }
            });

            var ctx2 = document.getElementById("customerChart").getContext("2d");

            // Customer chart
            CustomerChart = new Chart(ctx2, {
                type: "line",
                data: {
                    labels: Labels,
                    datasets: [{
                        label: "Customer Growth",
                        data: CustomerCountData,
                        backgroundColor: "rgba(54, 162, 235, 0.2)",
                        borderColor: "rgba(54, 162, 235, 1)",
                        borderWidth: 2,
                        fill: true,
                        tension: 0.4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        x: {
                            title: {
                                display: true,
                            }
                        },
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                            }
                        }
                    }
                }
            });


        }

        //ajax call to fill dashboard details
        function fillDashboardDetails(timePeriod = "", startDate = "", endDate = "") {
            timePeriod = $("#TimePeriod").val();
            console.log("hello")
             if (timePeriod == "curentMonth") {
                Labels = Array.from({ length: 31 }, (_, i) => i + 1)
            }
            else if(timePeriod == "last7" ){
                Labels = []
                for(i=6;i>=0;i--){
                    Labels.push(new Date(new Date().getTime() - i * 24 * 60 * 60 * 1000).getDate())
                }
            }else if(timePeriod == "last30"){
                Labels = []
                for(i=29;i>=0;i--){
                    Labels.push(new Date(new Date().getTime() - i * 24 * 60 * 60 * 1000).getDate())
                }
            }
            else if(timePeriod == "Today"){
                Labels = []
                for(i=0;i<=23;i++){
                    Labels.push(`${i}:00`)
                }
            }
            else {
                Labels = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
            }
 
            $.ajax({
                url: "/User/GetDashboardDetailsPartial",
                type: "GET",
                data: { timePeriod, startDate,endDate },
                success: function (data) {
                    @* console.log(data); *@
                    $("#DashboardPartialView").html(data);
                    ChangeGraphData(timePeriod,startDate,endDate);
                    setTimeout((X)=>{
                    ShowGraphs();
                    },300)
                }
            })
        }

        //change graph data according to time period selected
        function ChangeGraphData(timePeriod, startDate, endDate) {
            if (timePeriod == "custom") {
                if (startDate == "" || endDate == "") {
                    Labels = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
                }
                else {
                    var StartDateList = startDate.split("-")
                    var EndDateList = endDate.split("-")
                    if (StartDateList[1] == EndDateList[1]) {
                        Labels = Array.from({ length: 31 }, (_, i) => i + 1)
                    }
                    else {
                        var DemoLabels = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
                        Labels = []
                        for (i = parseInt(StartDateList[1]) - 1; i <= parseInt(EndDateList[1]) - 1; i++) {
                            Labels.push(DemoLabels[i])
                        }
                    }
                }
            }
            $.ajax({
                url: "/User/GetRevenueAndCustomer",
                type: "GET",
                data: { timePeriod: timePeriod, startDate: startDate, endDate: endDate },
                success: function (response) {
                    RevenueGrowthData = response.revenueList
                    CustomerCountData = response.customerList
                }
            })
        }
 
    </script>

}
