@using DAL.ViewModels;
@model OrderAppWaitingListViewModel

@{
    Layout = "~/Views/Shared/_OrderAppLayout.cshtml";
    ViewData["Title"] ="Waiting List";
}

<div class="d-flex justify-content-between">
    <div class="fs-2 fw-bold text-primary"> Waiting List</div>
    <button class="btn btn-outline-primary p-1 " data-bs-toggle="modal" data-bs-target="#AddWaitingTOkenModal"
        onclick="EmptyDetailsofAddModal();emptyVallidations()">+ Waiting
        Token</button>

</div>

<div class="bg-white  mt-2 p-2 pb-0  d-flex justify-content-start align-item-center " id="sectionListDisplay"
    style=" overflow:auto; scrollbar-width: thin;">

</div>

<div class="bg-white mt-3" style="min-height: 100px;">
    <div class="table-responsive">
        <table class="table ">
            <thead>
                <tr>
                    <th class="text-nowrap">#Token No.</th>
                    <th class="text-nowrap">Created At</th>
                    <th class="text-nowrap">Waiting Time</th>
                    <th class="text-nowrap">Name</th>
                    <th class="text-nowrap">No. Of Persons</th>
                    <th class="text-nowrap">Phone No.</th>
                    <th class="text-nowrap">Email</th>
                    <th class="text-center text-nowrap">Action</th>
                </tr>
            </thead>
            <tbody id="waitingListTable">
                @* partialview *@
            </tbody>
        </table>
    </div>
</div>

<!----------------------- modal-------------------->
<div id="AddWaitingTOkenModal" class="modal fade" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Waiting Token</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="waitingTokenFormId">
                <div class="modal-body row">
                    <div class="form-floating  col-12 mb-3">
                        <input type="text" class="form-control" id="Email" list="emailDatalist"
                            asp-for="@Model.waitingTokenDetailsViewModel.Email" placeholder="Email*"
                            onkeyup="GetSuggestionsusingEmail(this)" onchange="FillValuesBySuggestion(this)"
                            autocomplete="off">
                        <datalist id="emailDatalist"></datalist>
                        <span asp-validation-for="@Model.waitingTokenDetailsViewModel.Email"
                            class="text-danger RemoveValidations" id="RemoveValidations"></span>
                        <label for="Email"> &nbsp; Email*</label>
                    </div>
                    <div class="form-floating  col-12 mb-3">
                        <input type="text" class="form-control" id="Name"
                            asp-for="@Model.waitingTokenDetailsViewModel.Name" placeholder="Name*">
                        <span asp-validation-for="@Model.waitingTokenDetailsViewModel.Name"
                            class="text-danger RemoveValidations" id="RemoveValidations"></span>
                        <label for="Name"> &nbsp; Name*</label>
                    </div>
                    <div class="form-floating  col-12 mb-3">
                        <input type="text" class="form-control" id="mobile"
                            asp-for="@Model.waitingTokenDetailsViewModel.Mobileno" placeholder="Mobile Number*">
                        <span asp-validation-for="@Model.waitingTokenDetailsViewModel.Mobileno"
                            class="text-danger RemoveValidations" id="RemoveValidations"></span>
                        <label for="Mobile"> &nbsp; Mobile Number*</label>
                    </div>
                    <div class="form-floating  col-md-6 col-12 mb-3">
                        <input type="text" class="form-control" id="persons"
                            asp-for="@Model.waitingTokenDetailsViewModel.NoOfPerson" placeholder="Mobile Number*">
                        <span asp-validation-for="@Model.waitingTokenDetailsViewModel.NoOfPerson"
                            class="text-danger RemoveValidations" id="RemoveValidations"></span>
                        <label for="persons"> &nbsp; No Of persons*</label>
                    </div>
                    <div class="form-floating  col-md-6 col-12 mb-3">
                        <select asp-for="@Model.waitingTokenDetailsViewModel.SectionID" class="form-control"
                            id="EditTableModaldropDown">

                        </select>
                        <span asp-validation-for="@Model.waitingTokenDetailsViewModel.SectionName" class="text-danger "
                            id="RemoveValidations"></span>
                        <label for="EditTableModaldropDown"> &nbsp; Section*</label>
                    </div>
                    <input type="hidden" id="waitingid" asp-for="@Model.waitingTokenDetailsViewModel.waitingId">

                </div>

                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary">save</button>
                    <button type="button" class="btn btn-outline-primary" data-bs-dismiss="modal">cancel</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- delete waiting token -->
<div id="DeleteWaitingTokenModal" class="modal fade" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Delete Conformation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body ">
                <div class="delete-cat-image d-flex flex-column  align-items-center">
                    <img src="~/images/toppng.com-warning-icon-2400x2400.png" width="50px" alt="">
                    <p>Are you sure you want to delete this Waiting Token?</p>
                </div>
            </div>
            <form id="DeleteWaitingTokenFormId">
                <input type="hidden" asp-for="@Model.waitingTokenDetailsViewModel.waitingId" id="waitingTokenIdDelete"
                    name="waitingId">
                <div class="modal-footer d-flex justify-content-center">
                    <button type="submit" class="btn btn-primary">Yes</button>
                    <button type="button" class="btn btn-outline-primary" data-bs-dismiss="modal">No</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Assign table to  waiting token -->
<div id="AssignTableToWaitingModal" class="modal fade" tabindex="-1" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Assign Table</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"
                    onclick="emptyAssignModal()"></button>
            </div>
            <div class="modal-body row">
                <div class="form-floating  col-md-6 col-12 mb-3">
                    <select class="form-control" id="sectionList" disabled>

                    </select>
                    <label for="sectionList"> &nbsp; Section*</label>
                </div>

                <div class="form-floating  col-md-6 col-12 mb-3">

                    <input type="hidden" id="sectionSelected">
                    <input type="text" class="form-control" id="TableListBySection" onclick="GetTableDetailsToAssign()"
                        placeholder="Table">
                    <div class=" d-none mt-1" id="DisplayTables"
                        style="background-color: rgb(226, 226, 226); height:100px; overflow:auto;">

                    </div>
                    <label for="TableListBySection"> &nbsp; Table* <span class="text-danger">(Required)</span></label>
                </div>
            </div>

            <input type="hidden" id="waitingTokenId" name="waitingId">
            <input type="hidden" name="NoOfPerson" id="NoOfPersons">
            <div class="modal-footer d-flex justify-content-center">
                <button type="submit" class="btn btn-primary" onclick="AssignTableSubmitButton()" id="assignBtton"
                    disabled>Assign</button>
                <button type="button" class="btn btn-outline-primary" data-bs-dismiss="modal"
                    onclick="emptyAssignModal()">No</button>
            </div>
        </div>
    </div>
</div>


@section scripts {
    <script>
        var pageNumber;
        var sectionId;
        var selectedTables = [];

        function sectionSelected(tag) {
            pageNumber = 1;
            sectionId = tag.getAttribute("data-sectionid");
            var allclasses = document.getElementsByClassName("allCategory");
            for (var i = 0; i < allclasses.length; i++) {
                allclasses[i].classList.remove("KOTCategorySelect");
            }
            tag.classList.add("KOTCategorySelect");
            getWaitingListBySection(sectionId)
        }

        //to get list of all section
        function getAllSection() {
            $.ajax({
                url: "GetAllSection",
                type: "GET",
                success: function (data) {
                    $("#sectionListDisplay").html(data);
                }
            })
        }

        //get waiting token based on section
        function getWaitingListBySection(sectionId) {
            $.ajax({
                url: "/OrderAppWaitingList/GetWaitingListBySection",
                type: "Get",
                data: { sectionId },
                success: function (data) {
                    $("#waitingListTable").html(data);
                }
            })
        }

        //getSectionsDropdown
        function getSectionList() {
            $.ajax({
                url: "/TableAndSection/GetSectionList",
                type: "GET",
                success: function (data) {
                    console.log(data);
                    $("#EditTableModaldropDown").empty();
                    for (i = 0; i < data.length; i++) {
                        $("#EditTableModaldropDown").append(`<option value="${data[i].sectionId}">${data[i].sectionName}</option>`);
                    }
                }
            });
        }

        //GetSuggestionsusingEmail
        function GetSuggestionsusingEmail(tag) {
            var datalist = document.getElementById("emailDatalist");
            $.ajax({
                url: "GetCustomerByEmail",
                type: "GET",
                data: { Email: tag.value },
                success: function (data) {
                    console.log(data);
                    datalist.innerHTML = "";
                    data.forEach((x) => {
                        datalist.innerHTML += `<option value="${x.email}" data-name="${x.customerName}" data-number="${x.phoneno}">Name: ${x.customerName}, Mobile Number: ${x.phoneno}</option>`
                    })
                }
            })
        }

        //FillValuesBySuggestion
        function FillValuesBySuggestion(tag) {
            var datalist = $("#emailDatalist option[value='" + tag.value + "']");
            if (datalist.length) {
                document.getElementById("Name").value = datalist.data("name");
                document.getElementById("mobile").value = datalist.data("number");
            }
            document.getElementById("emailDatalist").innerHTML = "";

        }


        //Add waiting token
        $(document).on("submit", "#waitingTokenFormId", function (e) {
            e.preventDefault();
            let form = $("#waitingTokenFormId");
            let formData = new FormData(this);
            $.ajax({
                url: "/OrderAppWaitingList/AddWaitingToken",
                type: "Post",
                contentType: false,
                processData: false,
                data: formData,
                success: function (res) {
                    if (res.success) {
                        successToaster(res.text);
                    } else {
                        errorToaster(res.text);
                    }
                    getAllSection();
                    getWaitingListBySection(0);

                    $(".btn-close").click();
                }
            })
        })

        //edit waiting modal get
        function UpdateWaitingListModal(waitingId) {
            $.ajax({
                url: "/OrderAppWaitingList/GetDetailsByWaitingId",
                type: "GET",
                data: { waitingId },
                success: function (data) {
                    console.log(data);
                    document.getElementById("waitingid").value = data.waitingId;
                    document.getElementById("Email").value = data.email;
                    document.getElementById("Name").value = data.name;
                    document.getElementById("persons").value = data.noOfPerson;
                    document.getElementById("EditTableModaldropDown").value = data.sectionID;
                    document.getElementById("mobile").value = data.mobileno;


                }
            })
        }

        //Dlete Modal set id value
        function onDeleteIdSet(waitingId) {
            document.getElementById("waitingTokenIdDelete").value = waitingId;
        }

        $(document).on("submit", "#DeleteWaitingTokenFormId", function (e) {
            e.preventDefault();
            let waitingId = $("#waitingTokenIdDelete").val();
            console.log(waitingId)
            $.ajax({
                url: "/OrderAppWaitingList/DeleteWaitingToken",
                type: "PoST",
                contentType: false,
                processData: false,
                data: { waitingId },
                success: function (res) {
                    if (res.success) {
                        successToaster(res.text);
                    } else {
                        errorToaster(res.text);
                    }
                    getAllSection();
                    getWaitingListBySection(0);

                    $(".btn-close").click();
                }
            })
        })


        //Assign Table modal get
        function getSectionListAndTables(sectionID, waitingId, noOfPerson) {
            $.ajax({
                url: "/TableAndSection/GetSectionList",
                type: "GET",
                success: function (data) {
                    console.log(data);
                    $("#sectionList").empty();
                    for (i = 0; i < data.length; i++) {
                        if (data[i].sectionId == sectionID)
                            $("#sectionList").append(`<option value="${data[i].sectionId}" selected>${data[i].sectionName} </option>`);
                        else
                            $("#sectionList").append(`<option value="${data[i].sectionId}">${data[i].sectionName}</option>`);
                    }
                }
            });
            document.getElementById("sectionSelected").value = sectionID;
            document.getElementById("waitingTokenId").value = waitingId
            document.getElementById("NoOfPersons").value = noOfPerson;
            getTablebySectionId(sectionID)

        }

        function getTablebySectionId(sectionID) {
            console.log(sectionID);
            $.ajax({
                url: "/OrderAppWaitingList/GetTableBySection",
                type: "GET",
                data: { sectionID },
                success: function (data) {
                    console.log("tables:")
                    console.log(data);
                    if (data.length == 0) {
                        document.getElementById("DisplayTables").innerHTML += `<div>No Table Available In this Section</div>`
                    }
                    else {
                        for (i = 0; i < data.length; i++) {
                            console.log(data[i])
                            document.getElementById("DisplayTables").innerHTML += `<div><input type="checkbox" class="assignCheckbox me-2" data-capacity="${data[i].capacity}" id="tableId-${data[i].tableId}" onclick="EnableAssignButton(this)">${data[i].tableName} (${data[i].capacity})</div>`
                        }
                    }

                }
            })
        }

        //enable disable assign button
        function EnableAssignButton(tag) {
            var flag = false;
            var checkedclasses = document.getElementsByClassName("assignCheckbox");
            for (i = 0; i < checkedclasses.length; i++) {
                if (checkedclasses[i].checked) {
                    flag = true;
                    document.getElementById("assignBtton").removeAttribute("disabled");
                }
            }
            if (!flag) {
                document.getElementById("assignBtton").setAttribute("disabled", "disabled");
            }
        }

        //assign functionality
        function AssignTableSubmitButton() {
            var flag = false;
            var totalcapacity = 0;
            var classes = document.getElementsByClassName("assignCheckbox");
            for (i = 0; i < classes.length; i++) {
                if (classes[i].checked) {
                    flag = true;
                    totalcapacity += parseInt(classes[i].getAttribute("data-capacity"))
                    selectedTables.push(parseInt(classes[i].id.split("-")[1]))
                }
            }
            var waitingId = document.getElementById("waitingTokenId").value;
            var sectionId = document.getElementById("sectionSelected").value;
            var noOfPerson = document.getElementById("NoOfPersons").value;
            if (!flag) {
                errorToaster("Select Table First");
                return;
            }
            if (noOfPerson > totalcapacity) {
                errorToaster("Number of person is greater than Total capacity of selected Tables");
                return;
            }

            $.ajax({
                url: "/OrderAppWaitingList/AssignTable",
                type: "POST",
                data: { tablesArr: selectedTables, waitingId, sectionId },
                success: function (res) {
                    if (res.success) {
                        successToaster(res.text);
                        getAllSection();
                        getWaitingListBySection(0);
                        var customerId = res.customerId;
                        console.log("cust", customerId);
                        var menubutton = document.getElementById("MenuButtonLayout")
                        console.log(menubutton);
                        menubutton.setAttribute("href", `/OrderAppMenu/OrderAppMenu?customerId=${customerId}`)
                        console.log(menubutton)
                        menubutton.click();
                    } else {
                        errorToaster(res.text);
                        getAllSection();
                        getWaitingListBySection(0);
                    }
                    $(".btn-close").click();
                    emptyAssignModal();
                }
            })
        }

        //GetTableDetailsToAssign
        function GetTableDetailsToAssign() {
            document.getElementById("DisplayTables").classList.toggle("d-none");
        }

        //closebutton of assign modal
        function emptyAssignModal() {
            var classList = document.getElementById("DisplayTables").classList;
            if (!classList.contains("d-none")) {
                classList.add("d-none")
            }
            document.getElementById("DisplayTables").innerHTML = "";
            selectedTables = []

        }

        //EmptyDetailsofAddModal
        function EmptyDetailsofAddModal() {
            document.getElementById("emailDatalist").value = "";
            document.getElementById("emailDatalist").innerHTML = "";
            document.getElementById("Name").value = "";
            document.getElementById("Email").value = "";
            document.getElementById("mobile").value = "";
            document.getElementById("persons").value = "";
            removevalidations = document.getElementsByClassName("RemoveValidations");
            for (i = 0; i < removevalidations.length; i++) {
                removevalidations[i].innerHTML = ""
            }
            getSectionList();

        }
        function emptyVallidations() {
            removevalidations = document.getElementsByClassName("RemoveValidations");
            for (i = 0; i < removevalidations.length; i++) {
                removevalidations[i].innerHTML = ""
            }
        }


        $(document).ready(function () {
            getAllSection();
            getWaitingListBySection(0);
            getSectionList();
        })
    </script>
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <partial name="_Toaster" />
}